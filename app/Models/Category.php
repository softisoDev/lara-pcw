<?php

namespace App\Models;

use App\Observers\CategoryObserver;
use App\Traits\ModelCache;
use App\Traits\TotalCounter;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;
use Kalnoy\Nestedset\NodeTrait;
use Spatie\MediaLibrary\HasMedia\HasMedia;
use Spatie\MediaLibrary\HasMedia\HasMediaTrait;
use Spatie\MediaLibrary\Models\Media;

/**
 * @property Category[]|Collection $children
 */
class Category extends Model implements HasMedia
{
    use HasMediaTrait;
    use SoftDeletes;
    use NodeTrait;
    use ModelCache;
    use TotalCounter;

    public const CACHE_NAME = [
        "tree_tag"    => "tree_tags:id_%d",
        "url"         => "urls:id_%d",
        'navbar'      => 'navbar',
        'parents'     => 'parents',
        'descendants' => 'descendants:id_%d',
        'sidebar'     => 'sidebar:id_%d',
        'ancestors'   => 'ancestors:id_%d',
        'self'        => 'self:id_%d',
        'pages'       => 'pages:id_%d_page_%d',
        'tags'        => 'tags:id_%d',
        'total'       => 'total',
    ];

    public const REMOVABLE_CACHE_NAME = [
        'all_pages'  => 'pages',
        'page'       => 'pages:id_%d',
        'self'       => 'self:id_%d',
        'ancestor'   => 'ancestors:id_%d',
        'descendant' => 'descendants:id_%d',
        'navbar'     => 'navbar',
        'tags'       => 'tags',
    ];

    public const OBSERVE_CACHE = [
        'updated'      => [
            self::REMOVABLE_CACHE_NAME['all_pages'],
        ],
        'deleted'      => [
            self::REMOVABLE_CACHE_NAME['all_pages'],
        ],
        'created'      => [
            self::REMOVABLE_CACHE_NAME['all_pages'],
        ],
        'restored'     => [
            self::REMOVABLE_CACHE_NAME['all_pages'],
        ],
        'forceDeleted' => [
            self::REMOVABLE_CACHE_NAME['all_pages'],
        ],
    ];

    protected $table = "categories";

    protected $fillable = [
        'parent_id',
        'name',
        'title',
        'description',
        'content',
        'slug',
        'show_on_homepage',
        'product_total',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::observe(CategoryObserver::class);
    }

    public function setShowOnHomepageAttribute($value)
    {
        if ( $value === "true" || $value === "false" ):
            $this->attributes['show_on_homepage'] = ($value === "true") ? 1 : 0;
        else:
            $this->attributes['show_on_homepage'] = ($value === "1") ? 1 : 0;
        endif;
    }

    public function media()
    {
        return $this->morphMany(Media::class, 'model');
    }

    /**
     * @return BelongsToMany
     */
    public function product()
    {
        return $this->belongsToMany(Product::class, 'product_category', 'category_id', 'product_id')->orderByDesc('created_at');
    }

    /**
     * @param $query
     * @param string $prependValue
     * @param int $prependKey
     * @return array
     */
    public function scopeSelectBox($query, $prependValue = "Parent category", $prependKey = 0)
    {
        return self::all(['id', 'name'])->sortBy('name')->pluck('name', 'id')->prepend($prependValue, 0)->toArray();
    }

    public function registerMediaCollections()
    {
        $this->addMediaCollection('image')->acceptsMimeTypes = [
            'image/jpeg', 'image/jpeg', 'image/png', 'image/gif', 'image/bmp'
        ];
    }

    /**
     * @return string
     */
    public function generateUrl()
    {
        return addSlash2Url(route('front.category.show', ['slugCategory' => $this->slug, 'category' => $this->id]));
    }

    /**
     * @param $query
     * @param string $prependValue
     * @param string $prependKey
     * @return mixed
     */
    public function scopeParentSelectBox($query, $prependValue = "Parent category", $prependKey = "")
    {
        return self::where('parent_id', null)->pluck('name', 'id')->sortBy('name')->prepend($prependValue, $prependKey);
    }

    public function getDescendantsIdWithSelf()
    {
        $cacheKey = sprintf(static::CACHE_NAME['descendants'], $this->id);

        return self::cacheStore($cacheKey, Carbon::now()->addMonths(), function () {
            return self::descendantsAndSelf($this->id)->pluck('id');
        });
    }

    public function sideBarList()
    {
        $cacheKey = sprintf(static::CACHE_NAME['sidebar'], $this->id);

        return self::cacheStore($cacheKey, Carbon::now()->addMonths(), function () {
            if ( !is_null($this->getParentId()) ) {
                return $this->getAncestors(['id', 'name', 'slug']);
            }

            return $this->children()->whereHas('product')->get(['id', 'name', 'slug'])->toArray();
        });
    }

    public function generateSlug()
    {
        $slugs = self::select('name')->ancestorsAndSelf($this->id, ['name'])->map(function ($item) {
            return Str::slug($item->name);
        })->toArray();

        return implode("-", $slugs);
    }

    public function updateSlug()
    {
        $this->slug = $this->generateSlug();
        return $this->save();
    }

    public function getAncestors(array $columns = ['*'])
    {
        $cacheKey = sprintf(static::CACHE_NAME['ancestors'], $this->id);

        return self::cacheStore($cacheKey, Carbon::now()->addMonths(), function () use ($columns) {
            return $this->ancestors()->get($columns);
        });
    }

    public static function navbar()
    {
        $cacheKey = self::CACHE_NAME['navbar'];

        return self::cacheStore($cacheKey, Carbon::now()->addMonths(), function () {
            $categories = self::whereIsRoot()->orderByDesc('product_total')->get(['id', 'slug', 'name']);

            $categories->filter(function ($item) {
                $item->url = $item->generateUrl();
            });

            return $categories->toArray();
        });
    }

    public function getTags()
    {
        $cacheKey = sprintf(self::CACHE_NAME['tags'], $this->id);
        return self::cacheStore($cacheKey, Carbon::now()->addMonths(), function () {
            return Tag::select(['slug'])->whereLike('options', '"' . $this->id . '"')->get()->pluck('slug');
        });
    }

    public static function onlyParents(array $columns = ['*'])
    {
        return self::where('parent_id', null)->get($columns);
    }

}
