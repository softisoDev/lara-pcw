<?php

namespace App\Models;

use App\Observers\ProductObserver;
use App\Scopes\ActiveScope;
use App\Traits\MediaProperties;
use App\Traits\ModelCache;
use App\Traits\TotalCounter;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Database\Query\Builder;
use Laravel\Scout\Searchable;
use Spatie\Image\Manipulations;
use Spatie\MediaLibrary\HasMedia\HasMedia;
use Spatie\MediaLibrary\HasMedia\HasMediaTrait;
use Spatie\MediaLibrary\Models\Media;


class Product extends Model implements HasMedia
{
    use HasMediaTrait;
    use MediaProperties;
    use SoftDeletes;
    use ModelCache;
    use Searchable;
    use TotalCounter;

    public const CACHE_NAME = [
        'homepage' => 'homepage:index',
        'single' => 'single:id_%s',
        'search' => 'search:term_%s_page_%d',
        'self' => 'self:id_%s',
        'similar' => 'similar:id_%s',
        'schema' => 'schema:di_%s',
        'total' => 'total',
        'manufacturer_total' => 'manufacturer_total',

    ];

    public const REMOVABLE_CACHE_NAME = [
        'all_products' => 'single',
        'single' => 'single:id_%s',
        'self' => 'self:id_%s',
        'homepage' => 'homepage',
        'similar' => 'similar:id_%s',
    ];

    public const OBSERVE_CACHE = [
        'updated' => [
            self::REMOVABLE_CACHE_NAME['homepage'],
        ],
        'deleted' => [
            self::REMOVABLE_CACHE_NAME['homepage'],
        ],
        'created' => [
            self::REMOVABLE_CACHE_NAME['homepage'],
        ],
        'restored' => [
            self::REMOVABLE_CACHE_NAME['homepage'],
        ],
        'forceDeleted' => [
            self::REMOVABLE_CACHE_NAME['homepage'],
        ],
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::addGlobalScope(new ActiveScope());

        self::observe(ProductObserver::class);
    }

    protected $table = "products";

    protected $fillable = [
        'sp_hash', 'codes', 'brand_id', 'title', 'description', 'weight', 'dimensions', 'features', 'manufacturer', 'meta_description', 'status',
    ];

    /**
     * @return \Illuminate\Database\Eloquent\Relations\MorphMany|mixed
     */
    public function media()
    {
        return $this->morphMany(Media::class, 'model');
    }

    /**
     * @return BelongsToMany
     */
    public function category()
    {
        return $this->belongsToMany(Category::class, 'product_category', 'product_id', 'category_id');
    }

    /**
     * @return BelongsToMany
     */
    public function review()
    {
        return $this->belongsToMany(Review::class, 'product_review', 'product_id', 'review_id');
    }

    /**
     * @return BelongsToMany
     */
    public function tag()
    {
        return $this->belongsToMany(Tag::class, 'product_tag', 'product_id', 'tag_id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function variations()
    {
        return $this->hasMany(ProductVariation::class, 'product_id', 'id')->orderBy('current_price');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function brand()
    {
        return $this->belongsTo(Brand::class, 'brand_id', 'id');
    }

    /**
     * @return BelongsToMany|Builder
     */
    public function reviewDetail()
    {
        return $this->review()->selectRaw('product_id, ROUND(AVG(rating),0) AS average, count(*) AS aggregate')->groupBy('product_id');
    }

    /**
     * @return \stdClass
     */
    public function getReviewDetailAttribute()
    {
        if (!array_key_exists('reviewDetail', $this->relations)) {
            $this->load('reviewDetail');
        }

        $default = new \stdClass();
        $default->average = 0;
        $default->aggregate = 0;

        $related = $this->getRelation('reviewDetail');

        return (count($related) != 0) ? $related->first() : $default;
    }

    public function getCodesAttribute($value)
    {
        return (array)json_decode($value);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany|Builder
     */
    public function prices()
    {
        return $this->variations()
            ->with(['source' => function ($query) {
                $query->select(['id', 'name', 'status', 'created_at']);
            }])
            ->selectRaw('product_id, source_id, currency, MIN(current_price) AS cheapest, MAX(current_price) AS highest')
            ->groupBy('product_id');
    }

    /**
     * @return array
     */
    public function getPricesAttribute()
    {
        if (!array_key_exists('prices', $this->relations)) {
            $this->load('prices');
        }

        $related = $this->getRelation('prices');

        return (count($related) != 0) ? $related->first() : [];
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany|Builder
     */
    public function cheapest()
    {
        return $this->variations()
            ->with(['source' => function ($query) {
                $query->select(['id', 'name', 'status', 'created_at']);
            }])
            ->selectRaw('product_id, source_id, currency, MIN(current_price) AS current_price')
            ->groupBy('product_id');
    }

    /**
     * @return array
     */
    public function getCheapestAttribute()
    {
        if (!array_key_exists('cheapest', $this->relations)) {
            $this->load('cheapest');
        }

        $related = $this->getRelation('cheapest');

        return (count($related) != 0) ? $related->first() : [];
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany|Builder
     */
    public function cheapestWithoutSource()
    {
        return $this->variations()
            ->selectRaw('product_id, currency, MIN(current_price) AS current_price')
            ->groupBy('product_id');
    }

    /**
     * @return array
     */
    public function getCheapestWithoutSourceAttribute()
    {
        if (!array_key_exists('cheapestWithoutSource', $this->relations)) {
            $this->load('cheapestWithoutSource');
        }

        $related = $this->getRelation('cheapestWithoutSource');

        return (count($related) != 0) ? $related->first() : [];
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany|Builder
     */
    public function highest()
    {
        return $this->variations()
            ->with(['source' => function ($query) {
                $query->select(['id', 'name', 'status', 'created_at']);
            }])
            ->selectRaw('product_id, source_id, currency, MAX(current_price) AS current_price')
            ->groupBy('product_id');
    }

    /**
     * @return array
     */
    public function getHighestAttribute()
    {
        if (!array_key_exists('highest', $this->relations)) {
            $this->load('highest');
        }

        $related = $this->getRelation('highest');

        return (count($related) != 0) ? $related->first() : [];
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\MorphMany
     */
    public function gridMainImageUrl()
    {
        return $this->media()
            ->where('custom_properties', 'LIKE', '%is_main%')
            ->groupBy('model_id');
    }

    /**
     * @return \Illuminate\Config\Repository|mixed
     */
    public function getGridMainImageUrlAttribute()
    {
        if (!array_key_exists('gridMainImageUrl', $this->relations)) {
            $this->load('gridMainImageUrl');
        }

        $related = $this->getRelation('gridMainImageUrl');

        return (count($related) != 0) ? $related->first()->getFullUrl('medium-thumb') : config('constants.image.no_image');
    }

    /**
     * @return BelongsToMany
     */
    public function mainCategory()
    {
        return $this->category()->where('is_primary', 1)->limit(1);
    }

    /**
     * @return array
     */
    public function getMainCategoryAttribute()
    {
        if (!array_key_exists('mainCategory', $this->relations)) {
            $this->load('mainCategory');
        }

        $related = $this->getRelation('mainCategory');

        return (count($related) != 0) ? $related->first() : [];
    }

    /**
     * @return BelongsToMany|Builder
     */
    public function singleRandomReview()
    {
        return $this->review()->inRandomOrder()->take(5)->groupBy('product_id');
    }

    /**
     * @return array
     */
    public function getSingleRandomReviewAttribute()
    {
        if (!array_key_exists('singleRandomReview', $this->relations)) {
            $this->load('singleRandomReview');
        }

        $related = $this->getRelation('singleRandomReview');

        return (count($related) != 0) ? $related->first() : [];
    }

    /**
     * @return string
     */
    public function getTagForInput()
    {
        $result = [];

        foreach ($this->tag as $tag) {
            $result[] = implode(' ', explode('-', $tag->slug));
        }

        return implode(",", $result);
    }

    public function registerMediaCollections()
    {
        $this->addMediaCollection('image')->acceptsMimeTypes = [
            'image/jpeg', 'image/jpg', 'image/png', 'image/bmp',
        ];
    }

    /**
     * @param Media|null $media
     * @throws \Spatie\Image\Exceptions\InvalidManipulation
     */
    public function registerMediaConversions(Media $media = null)
    {
        $this->addMediaConversion('small-thumb')
            ->performOnCollections('image')
            ->fit(Manipulations::FIT_CROP, 58, 58)
            ->nonQueued();

        $this->addMediaConversion('medium-thumb')
            ->performOnCollections('image')
            ->fit(Manipulations::FIT_CROP, 220, 220)
            ->nonQueued();
    }

    /**
     * @return string
     */
    public function generateUrl()
    {
        return addSlash2Url(route('front.product.show', ['product' => $this->sp_hash]));
    }

    public function similar($categoryID)
    {
        /**
         * @var $products Builder
         */

        $products = self::query()
            ->with([
                'cheapest',
                'gridMainImageUrl',
            ])
            ->where(function ($query) use ($categoryID) {
                $query->whereHas('variations');
                $query->where('id', '!=', $this->id);
                $query->whereHas('category', function ($query) use ($categoryID) {
                    $query->where('category_id', $categoryID);
                });
            })
            ->orderByDesc('created_at')
            ->limit(20)
            ->get();

        return $products->similarGrid();
    }

    public static function totalManufacturer()
    {
        return self::cacheStore(self::CACHE_NAME['manufacturer_total'], Carbon::now()->addMonths(), function () {
            return self::query()->groupBy('manufacturer')->distinct()->count();
        });
    }

    public static function forgetTotalManufacturer()
    {
        self::forgetOne(self::CACHE_NAME['manufacturer_total']);
    }

}
