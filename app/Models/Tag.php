<?php

namespace App\Models;

use App\Observers\TagObserver;
use App\Traits\ModelCache;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Carbon;

class Tag extends Model
{
    use SoftDeletes;
    use ModelCache;

    public const CACHE_NAME = [
        "keyword" => "keyword:%s",
        'pages'   => 'pages:id_%d_page_%d',
        'self'    => 'self:id_%d',
    ];

    public const REMOVABLE_CACHE_NAME = [
        'all_pages' => 'pages',
        'keyword'   => 'keyword',
        'self'      => 'self:id_%d',
    ];

    public const OBSERVE_CACHE = [
        'updated'      => [
            self::REMOVABLE_CACHE_NAME['all_pages'],
        ],
        'deleted'      => [
            self::REMOVABLE_CACHE_NAME['all_pages'],
        ],
        'created'      => [
            self::REMOVABLE_CACHE_NAME['all_pages'],
        ],
        'restored'     => [
            self::REMOVABLE_CACHE_NAME['all_pages'],
        ],
        'forceDeleted' => [
            self::REMOVABLE_CACHE_NAME['all_pages'],
        ],
    ];

    protected $table = "tags";

    protected $fillable = [
        'slug', 'title', 'description', 'content', 'status', 'options', 'search_count', 'is_hot'
    ];

    protected $casts = [
        'status' => 'boolean',
        'is_hot' => 'boolean',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::observe(TagObserver::class);
    }

    public function product()
    {
        return $this->belongsToMany(Product::class, 'product_tag', 'tag_id', 'product_id');
    }

    public static function single($tag)
    {
        $cacheKey = sprintf(self::CACHE_NAME['keyword'], $tag);

        return self::cacheStore($cacheKey, Carbon::now()->addMonths(), function () use ($tag) {
            return self::where('slug', implode(" ", explode('-', $tag)))->firstOrFail();
        });
    }

    public function resolveOption()
    {
        if (is_null($this->options)){
            return $this->slug;
        }

        $options = json_decode($this->options);

        return is_null($options->query) ? $this->slug : $options->query;
    }
}
